#!/usr/bin/env bash

# Add support for iptables legacy (Ex : docker-machine)
cmd="iptables -v"
iptables -L || cmd="iptables-legacy -v"

iptables_rules_create() {
  $cmd -t nat -N REDSOCKS

  # private ip ranges are not intercepted
  $cmd -t nat -A REDSOCKS -d 10.0.0.0/8 -j RETURN
  $cmd -t nat -A REDSOCKS -d 127.0.0.0/8 -j RETURN
  $cmd -t nat -A REDSOCKS -d 169.254.0.0/16 -j RETURN
  $cmd -t nat -A REDSOCKS -d 172.16.0.0/12 -j RETURN
  $cmd -t nat -A REDSOCKS -d 192.168.0.0/16 -j RETURN
  $cmd -t nat -A REDSOCKS -d 224.0.0.0/4 -j RETURN
  $cmd -t nat -A REDSOCKS -d 240.0.0.0/4 -j RETURN

  # http to http-relay
  $cmd -t nat -A REDSOCKS -p tcp --dport 80 -j REDIRECT --to-ports 12345

  # anything else to http-connect
  $cmd -t nat -A REDSOCKS -p tcp -j REDIRECT --to-ports 12346

  # Redirect docker to redsocks
  $cmd -t nat -A PREROUTING -p tcp -s 172.16.0.0/12 -j REDSOCKS
}

iptables_rules_delete() {
  $cmd -t nat -D PREROUTING -p tcp -s 172.16.0.0/12 -j REDSOCKS
  $cmd -t nat -F REDSOCKS
  $cmd -t nat -X REDSOCKS
}

append_redsocks_conf() {
  local type=$1
  local ip=$2
  local port=$3
  local local_port=$4
  if [ -z "$type" -o -z "$ip" -o -z "$port" -o -z "$local_port" ] ; then
    echo missing required parameter >&2
    exit 1
  fi
  (cat <<EOF
redsocks {
  type = $type;
  ip = $ip;
  port = $port;
  local_ip = 0.0.0.0;
  local_port = $local_port;
}
EOF
) >> /tmp/redsocks.conf
}

parse_ip() {
  echo $1 | sed -nE "s/^(http(s)?:\/\/)?(.+):([0-9]+)\/?$/\3/p"
}

parse_port() {
  echo $1 | sed -nE "s/^(http(s)?:\/\/)?(.+):([0-9]+)\/?$/\4/p"
}

stop() {
    echo "Cleaning iptables"
    iptables_rules_delete
    pkill -9 redsocks
}

interrupted () {
    echo 'Interrupted, cleaning up...'
    trap - INT
    stop
    kill -INT $$
}

run() {
    trap interrupted INT
    trap terminated TERM

    if [ -z "$http_proxy" ]; then
        echo "No http_proxy set. Exiting"
        exit 1
    fi

    ip=$(parse_ip $http_proxy)
    port=$(parse_port $http_proxy)
    append_redsocks_conf "http-relay" $ip $port "12345"

    if [ -z "$https_proxy" ]; then
        https_proxy="$http_proxy"
    fi

    ip=$(parse_ip $https_proxy)
    port=$(parse_port $https_proxy)
    append_redsocks_conf "http-connect" $ip $port "12346"

    iptables_rules_create
    /usr/sbin/redsocks -c /tmp/redsocks.conf &

    tail -f /dev/null
}


terminated () {
    echo 'Terminated, cleaning up...'
    trap - TERM
    stop
    kill -TERM $$
}

case "$1" in
    stop )  stop ;;
    * )     run ;;
esac
